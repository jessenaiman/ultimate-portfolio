---
// Reusable daisyUI theme controller with persistence
// Usage: <ThemeController themes={["dark","light", ...]} />
// If no `themes` prop passed, falls back to a sensible default list.
// The component relies solely on daisyUI semantic utilities and CSS variables.

interface Props {
  themes?: string[];
  dropdownClass?: string; // Allows overriding wrapper classes if needed
}

const {
  themes = [
    "dark",
    "light",
    "cupcake",
    "bumblebee",
    "autumn",
    "dracula",
  ],
  dropdownClass = "dropdown dropdown-end",
} = Astro.props as Props;
---
<div class={dropdownClass}>
  <label tabindex="0" class="btn btn-ghost btn-circle">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
    </svg>
  </label>
  <ul tabindex="0" class="menu dropdown-content mt-3 z-1 p-2 shadow bg-base-100 rounded-box w-52 border border-base-300/40">
    {themes.map((t) => (
      <li>
        <label class="flex items-center gap-2 cursor-pointer capitalize">
          <input
            type="radio"
            name="theme-dropdown"
            value={t}
            class="theme-controller"
            data-set-theme={t}
            aria-label={t}
          />
          <span>{t.replace(/-/g, " ")}</span>
        </label>
      </li>
    ))}
  </ul>
</div>

<script is:inline>
  // This script persists the user's theme choice in localStorage.
  const themeKey = 'theme';

  function applyTheme() {
    const savedTheme = localStorage.getItem(themeKey);
    if (savedTheme) {
      document.documentElement.setAttribute('data-theme', savedTheme);
    }
  }

  // Apply theme on initial load
  applyTheme();

  // Re-apply theme after Astro's view transitions
  document.addEventListener('astro:after-swap', applyTheme);

  // Add event listeners to theme radio buttons to save the new theme
  document.querySelectorAll('input.theme-controller').forEach(radio => {
    radio.addEventListener('change', (e) => {
      const newTheme = e.target.value;
      localStorage.setItem(themeKey, newTheme);
      document.documentElement.setAttribute('data-theme', newTheme);
    });
  });
</script>
