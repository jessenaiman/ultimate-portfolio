---
import { getHighlighter, type Highlighter } from 'shiki';

interface Props {
  /** The code string to be highlighted */
  code: string;
  /** Language for syntax highlighting */
  lang?: 'javascript' | 'typescript' | 'jsx' | 'tsx' | 'html' | 'css' | 'astro' | 'bash' | 'json' | 'markdown';
  /** Color theme for the code block */
  theme?: 'github-dark' | 'github-light' | 'material-theme' | 'slack-dark' | 'nord' | 'min-light' | 'min-dark';
  /** Whether to show line numbers */
  showLineNumbers?: boolean;
  /** Whether to show the copy button */
  showCopyButton?: boolean;
  /** Custom class for the code block container */
  class?: string;
}

const {
  code,
  lang = 'javascript',
  theme = 'github-dark',
  showLineNumbers = true,
  showCopyButton = true,
  class: className = ''
} = Astro.props;

// Initialize the highlighter with the specified theme
let highlighter: Highlighter;
let html = '';

try {
  highlighter = await getHighlighter({ 
    theme,
    langs: [lang]
  });

  // Highlight the code
  html = highlighter.codeToHtml(code, {
    lang,
    theme,
    transformers: [
      {
        line(node: { properties: Record<string, unknown> }) {
          if (showLineNumbers) {
            node.properties['data-line-number'] = node.properties['data-line'];
          }
        }
      }
    ]
  });
} catch (error) {
  console.error('Error highlighting code:', error);
  // Fallback to plain text if highlighting fails
  html = `<pre><code>${code}</code></pre>`;
}
---

<div class={`code-block not-prose relative rounded-lg overflow-hidden my-6 ${className}`} data-theme={theme}>
  <div class="flex items-center justify-between px-4 py-2 bg-base-300 border-b border-base-content/10">
    <div class="flex items-center gap-2">
      <span class="text-xs font-mono text-base-content/70">{lang}</span>
      {showLineNumbers && (
        <span class="text-xs px-2 py-0.5 rounded-full bg-base-200 text-base-content/50">
          Line Numbers
        </span>
      )}
    </div>
    
    {showCopyButton && (
      <button 
        class="btn btn-ghost btn-xs gap-1 text-base-content/70 hover:text-primary"
        onclick="this.classList.add('btn-success', 'text-success-content');
                 navigator.clipboard.writeText(atob('${btoa(code)}'));
                 setTimeout(() => this.classList.remove('btn-success', 'text-success-content'), 1000);"
        title="Copy to clipboard"
      >
        <span class="copy-text">Copy</span>
        <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
        </svg>
      </button>
    )}
  </div>
  <div class="p-4 overflow-x-auto bg-base-100">
    <div class="code-container" set:html={html} />
  </div>
</div>

<style is:global>
  .code-block {
    --tw-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
    --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color), 0 1px 2px -1px var(--tw-shadow-color);
    box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
    transition: box-shadow 0.2s ease-in-out;
  }

  .code-block:hover {
    --tw-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -1px rgb(0 0 0 / 0.1);
    --tw-shadow-colored: 0 4px 6px -1px var(--tw-shadow-color), 0 2px 4px -1px var(--tw-shadow-color);
  }

  .code-container pre {
    margin: 0;
    padding: 0;
    background: transparent !important;
    font-size: 0.875rem;
    line-height: 1.5;
  }

  .code-container code {
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
    tab-size: 2;
  }

  .code-container .line {
    display: block;
    min-height: 1.25rem;
    padding: 0 1rem;
  }

  .code-container .line.highlighted {
    background-color: rgba(59, 130, 246, 0.1);
  }

  .code-container .line.diff {
    background-color: rgba(254, 243, 199, 0.3);
  }

  .code-container .line.diff.remove {
    background-color: rgba(254, 226, 226, 0.3);
  }

  .code-container .line.diff.add {
    background-color: rgba(220, 252, 231, 0.3);
  }

  .code-container .line.diff.prefix.space {
    background-color: transparent;
  }

  .code-container .line.diff.prefix {
    user-select: none;
    padding-right: 0.5rem;
    color: #6b7280;
  }

  .code-container .line.highlighted.diff {
    background-color: rgba(59, 130, 246, 0.2);
  }

  .code-container .line.highlighted.diff.remove {
    background-color: rgba(248, 113, 113, 0.2);
  }

  .code-container .line.highlighted.diff.add {
    background-color: rgba(74, 222, 128, 0.2);
  }

  .code-container .line.highlighted.diff.prefix.space {
    background-color: transparent;
  }

  .code-container .line.highlighted.diff.prefix {
    background-color: transparent;
  }

  .code-container .line:empty::before {
    content: ' ';
  }

  .copy-text {
    transition: opacity 0.2s ease-in-out;
  }

  .btn-success .copy-text {
    opacity: 0;
  }

  .btn-success::after {
    content: 'Copied!';
    position: absolute;
    left: 0;
    right: 0;
    text-align: center;
    opacity: 0;
    transition: opacity 0.2s ease-in-out;
  }

  .btn-success::after {
    opacity: 1;
  }

  /* Line numbers */
  [data-line] {
    position: relative;
    padding-left: 3.5rem !important;
  }

  [data-line]::before {
    content: attr(data-line);
    position: absolute;
    left: 0.5rem;
    width: 2.5rem;
    text-align: right;
    color: var(--fallback-nc, oklch(var(--nc) / 0.5));
    font-variant-numeric: tabular-nums;
    user-select: none;
    pointer-events: none;
  }

  /* Dark mode adjustments */
  .dark [data-line]::before {
    color: var(--fallback-nc, oklch(var(--nc) / 0.5));
  }
</style>