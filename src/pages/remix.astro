---
import Layout from '../layouts/Layout.astro';
import { getEntry } from 'astro:content';

// Get the Remix markdown content
const remixContent = await getEntry('info', 'remix');

// Remix component examples
const componentExamples = {
  route: `// app/routes/products.$id.tsx
import { json } from '@remix-run/node';
import { useLoaderData } from '@remix-run/react';

// Mock product type for example
type ProductType = {
  id: string;
  title: string;
  description: string;
  price: string;
};

// Mock function to get a product
async function getProduct(id: string): Promise<ProductType | null> {
  // In a real app, this would fetch from a database
  return {
    id,
    title: 'Example Product',
    description: 'This is an example product',
    price: '$99.99'
  };
}

export async function loader({ params }) {
  const product = await getProduct(params.id);
  if (!product) {
    throw new Response('Not Found', { status: 404 });
  }
  return json({ product });
}

export default function Product() {
  const { product } = useLoaderData<typeof loader>();
  
  return (
    <div>
      <h1>{product.title}</h1>
      <p>{product.description}</p>
      <span>{product.price}</span>
    </div>
  );
}`,

  action: `// app/routes/newsletter.tsx
import { redirect, type ActionFunctionArgs } from '@remix-run/node';
import { Form } from '@remix-run/react';

export async function action({ request }: ActionFunctionArgs) {
  const formData = await request.formData();
  const email = formData.get('email');
  
  await subscribeToNewsletter(email);
  return redirect('/success');
}

export default function Newsletter() {
  return (
    <Form method="post">
      <input type="email" name="email" required />
      <button type="submit">Subscribe</button>
    </Form>
  );
}`,

  error: `// app/routes/dashboard.tsx
import { json, type LoaderFunctionArgs } from '@remix-run/node';
import { useLoaderData, useCatch } from '@remix-run/react';

export async function loader({ request }: LoaderFunctionArgs) {
  const user = await getUser(request);
  if (!user) {
    throw json({ message: "Unauthorized" }, { status: 401 });
  }
  return json({ user });
}

export default function Dashboard() {
  const { user } = useLoaderData<typeof loader>();
  return <h1>Welcome, {user.name}!</h1>;
}

export function CatchBoundary() {
  const caught = useCatch();
  return (
    <div>
      <h1>Error: {caught.status}</h1>
      <p>{caught.data.message}</p>
    </div>
  );
}`
};

// Features of Remix
const features = [
  {
    title: "Nested Routing",
    description: "Organize your app with nested routes that map to nested UI components, enabling better code organization and parallel data loading."
  },
  {
    title: "Server-Side Rendering",
    description: "Deliver fast initial page loads with server rendering, then hydrate for client-side interactivity."
  },
  {
    title: "Progressive Enhancement",
    description: "Build apps that work even without JavaScript, then enhance the experience when JS is available."
  },
  {
    title: "Data Loading",
    description: "Co-locate data fetching with your routes for simpler mental models and better performance."
  },
  {
    title: "Error Boundaries",
    description: "Handle errors at any level of your application with a sophisticated error boundary system."
  }
];
---

<Layout
  title="Remix: Full Stack Web Framework"
  primaryBallColor="#121212"
  secondaryBallColor="#E8F2FF"
>
  <main class="container mx-auto px-4 py-12 max-w-7xl">
    <!-- Hero Section -->
    <section class="text-center mb-16">
      <div class="flex justify-center mb-6">
        <div class="badge badge-primary badge-lg p-4 text-lg">Full Stack Framework</div>
      </div>
      <h1 class="text-5xl font-bold mb-6">Remix</h1>
      <p class="text-xl max-w-3xl mx-auto mb-8">
        A full stack web framework that leverages React for UI and provides powerful server-side capabilities.
      </p>
      <div class="flex justify-center gap-4">
        <a href="https://remix.run" target="_blank" rel="noopener noreferrer" class="btn btn-primary">
          Official Documentation
        </a>
        <button class="btn btn-outline" onclick="document.getElementById('learn-more-modal').showModal()">
          Learn More
        </button>
      </div>
    </section>

    <!-- Learn More Modal -->
    <dialog id="learn-more-modal" class="modal modal-bottom sm:modal-middle">
      <div class="modal-box prose max-w-3xl">
        <h3 class="font-bold text-lg">{remixContent?.data.title || "Remix: Full Stack Web Framework"}</h3>
        {remixContent && <div set:html={await remixContent.render()} />}
        <div class="modal-action">
          <form method="dialog">
            <button class="btn">Close</button>
          </form>
        </div>
      </div>
    </dialog>

    <!-- Features Section -->
    <section class="mb-16">
      <h2 class="text-3xl font-bold mb-8 text-center">Key Features</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {features.map(feature => (
          <div class="card bg-base-100 shadow-xl hover:shadow-2xl transition-shadow duration-300">
            <div class="card-body">
              <h3 class="card-title">{feature.title}</h3>
              <p>{feature.description}</p>
            </div>
          </div>
        ))}
      </div>
    </section>

    <!-- Code Examples Section -->
    <section class="mb-16">
      <h2 class="text-3xl font-bold mb-8 text-center">Code Examples</h2>
      
      <!-- Tabs for different examples -->
      <div class="tabs tabs-boxed justify-center mb-6">
        <a class="tab tab-active" data-tab="route">Loader & Routes</a>
        <a class="tab" data-tab="action">Form Actions</a>
        <a class="tab" data-tab="error">Error Handling</a>
      </div>
      
      <!-- Code blocks -->
      <div class="code-blocks">
        <div class="code-block active" id="route-block">
          <div class="mockup-code bg-primary text-primary-content">
            <pre><code>{componentExamples.route}</code></pre>
          </div>
        </div>
        
        <div class="code-block hidden" id="action-block">
          <div class="mockup-code bg-secondary text-secondary-content">
            <pre><code>{componentExamples.action}</code></pre>
          </div>
        </div>
        
        <div class="code-block hidden" id="error-block">
          <div class="mockup-code bg-accent text-accent-content">
            <pre><code>{componentExamples.error}</code></pre>
          </div>
        </div>
      </div>
    </section>

    <!-- Remix Ecosystem Section -->
    <section class="mb-16">
      <h2 class="text-3xl font-bold mb-8 text-center">Remix Ecosystem</h2>
      <div class="flex flex-wrap justify-center gap-3">
        <div class="badge badge-lg p-4">React Router</div>
        <div class="badge badge-lg p-4">Nested Routes</div>
        <div class="badge badge-lg p-4">Server Functions</div>
        <div class="badge badge-lg p-4">Form Handling</div>
        <div class="badge badge-lg p-4">Error Boundaries</div>
        <div class="badge badge-lg p-4">Cloudflare</div>
        <div class="badge badge-lg p-4">Vercel</div>
        <div class="badge badge-lg p-4">Netlify</div>
        <div class="badge badge-lg p-4">Fly.io</div>
      </div>
    </section>

    <!-- Call to Action -->
    <section class="text-center mb-16">
      <div class="card bg-base-200 max-w-3xl mx-auto">
        <div class="card-body">
          <h2 class="card-title justify-center mb-4">Ready to start building with Remix?</h2>
          <p class="mb-6">Get started with the official Remix documentation and tutorials.</p>
          <div class="card-actions justify-center">
            <a href="https://remix.run/docs/en/main" target="_blank" rel="noopener noreferrer" class="btn btn-primary">
              Start Learning
            </a>
          </div>
        </div>
      </div>
    </section>
  </main>

  <!-- Chat with Remix Expert Button -->
  <div class="fixed bottom-4 right-4 z-50">
    <button id="chat-button" class="btn btn-primary btn-circle">
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
        <path stroke-linecap="round" stroke-linejoin="round" d="M12 20.25c4.97 0 9-3.694 9-8.25s-4.03-8.25-9-8.25S3 7.444 3 12c0 2.104.859 4.023 2.273 5.48.432.447.74 1.04.586 1.641a4.483 4.483 0 01-.923 1.785A5.969 5.969 0 006 21c1.282 0 2.47-.402 3.445-1.087.81.22 1.668.337 2.555.337z" />
      </svg>
    </button>
  </div>

  <script is:inline>
    // Tab switching functionality
    document.addEventListener('DOMContentLoaded', () => {
      const tabs = document.querySelectorAll('.tab');
      const codeBlocks = document.querySelectorAll('.code-block');
      
      tabs.forEach(tab => {
        tab.addEventListener('click', () => {
          // Remove active class from all tabs
          tabs.forEach(t => t.classList.remove('tab-active'));
          // Add active class to clicked tab
          tab.classList.add('tab-active');
          
          // Hide all code blocks
          codeBlocks.forEach(block => block.classList.add('hidden'));
          // Show the selected code block
          const blockId = `${tab.dataset.tab}-block`;
          document.getElementById(blockId).classList.remove('hidden');
        });
      });
    });
  </script>

  <!-- Flowise Chat Integration -->
  <script type="module">
    import Chatbot from "https://cdn.jsdelivr.net/npm/flowise-embed/dist/web.js"
    document.getElementById('chat-button').addEventListener('click', () => {
      Chatbot.init({
        chatflowid: "5565a6be-fe2a-4866-9fc6-1f341513dd86",
        apiHost: "https://flowise.omega-spiral.com",
        chatflowConfig: {
          // Send framework-specific context
          topK: 5,
          temperature: 0.7,
          systemPrompt: "You are a Remix expert assistant. Help the user with Remix-related questions."
        },
        theme: {
          button: {
            backgroundColor: "#121212",
            right: 20,
            bottom: 80
          }
        }
      })
    })
  </script>
</Layout>

<style>
  main {
    margin: auto;
    padding: 1rem;
    width: 800px;
    max-width: calc(100% - 2rem);
    color: white;
    font-size: 20px;
    line-height: 1.6;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    margin-bottom: 2rem;
    border: 1px solid rgba(var(--accent-light), 25%);
    background: linear-gradient(rgba(var(--accent-dark), 66%), rgba(var(--accent-dark), 33%));
    padding: 1.5rem;
    border-radius: 8px;
  }
</style>