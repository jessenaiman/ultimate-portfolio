---
import Layout from "../layouts/Layout.astro";
import Hero from "../components/ui/Hero.astro";
import DemoCard from "../components/ui/DemoCard.astro";
import { Code } from 'astro:components';
import { Content as ChatContent } from "../content/pollinate-ai.md";

// Import the main interactive component
import InteractiveShowcase from "../components/React/Assistant/InteractiveShowcase.tsx";

// Safe code example instead of ?raw import
const chatSource = `import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { usePollinationsChat } from '@pollinations/react';

interface Message {
  id: number;
  content: string;
  sender: 'user' | 'assistant';
}

const ProfessionalAssistant: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: 1,
      content: "Hello! I'm Jesse Naiman, a Senior Developer with nearly 20 years of experience...",
      sender: "assistant"
    }
  ]);

  const [newMessage, setNewMessage] = useState('');
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Pollinations chat hook with professional context
  const systemPrompt = "You are Jesse Naiman, a Senior Developer and Community Support specialist with nearly 20 years of programming experience. You are professional, helpful, and ready to solve complex technical problems. Key background information: 20+ years as programmer/web developer, expertise in full-stack development (.NET, JavaScript, React, Vue, Svelte, Solid), experience with modern frameworks and tools, strong problem-solving skills, background in managing teams and community support, experience with Web3/blockchain technologies. You should be professional and solution-oriented, draw from extensive development experience, be willing to tackle complex technical challenges, show enthusiasm for development tasks, be honest about knowledge gaps, and focus on practical solutions. Always maintain professional tone while being approachable.";

  const { messages: pollinationsMessages, sendUserMessage } = usePollinationsChat([
    { role: 'system', content: systemPrompt }
  ], {
    seed: 42,
    model: 'gpt-3.5-turbo'
  });

  // Sync pollinations messages with our local state
  useEffect(() => {
    if (pollinationsMessages.length > 1) {
      const latestMessage = pollinationsMessages[pollinationsMessages.length - 1];
      if (latestMessage.role === 'assistant') {
        const assistantMessage: Message = {
          id: messages.length + 1,
          content: typeof latestMessage.content === 'string'
            ? latestMessage.content
            : JSON.stringify(latestMessage.content),
          sender: 'assistant'
        };
        setMessages(prev => [...prev, assistantMessage]);
      }
    }
  }, [pollinationsMessages]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newMessage.trim()) return;

    const userMessage: Message = {
      id: messages.length + 1,
      content: newMessage,
      sender: 'user'
    };
    setMessages(prev => [...prev, userMessage]);
    sendUserMessage(newMessage);
    setNewMessage('');
  };

  return (
    <div className="w-full h-full bg-base-100 rounded-lg shadow-xl flex flex-col">
      <div className="bg-gradient-to-r from-primary to-secondary text-primary-content p-4 rounded-t-lg">
        <div className="flex items-center gap-3">
          <div className="avatar placeholder">
            <div className="bg-neutral text-neutral-content rounded-full w-10">
              <span className="text-sm font-bold">JN</span>
            </div>
          </div>
          <div>
            <h3 className="font-bold text-lg">Jesse Naiman</h3>
            <p className="text-sm opacity-90">Senior Developer & Technical Consultant</p>
          </div>
        </div>
      </div>

      <div className="flex-1 overflow-y-auto p-4 space-y-4 max-h-96 min-h-64">
        <AnimatePresence>
          {messages.map((message) => (
            <motion.div
              key={message.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              className={"flex " + (message.sender === 'user' ? 'justify-end' : 'justify-start')}
            >
              <div className={"max-w-xs lg:max-w-md px-4 py-2 rounded-lg " + (
                message.sender === 'user'
                  ? 'bg-primary text-primary-content'
                  : 'bg-base-200 text-base-content'
              )}>
                <p className="whitespace-pre-wrap">{message.content}</p>
              </div>
            </motion.div>
          ))}
        </AnimatePresence>
        <div ref={messagesEndRef} />
      </div>

      <div className="p-4 border-t border-base-300">
        <form onSubmit={handleSubmit} className="flex gap-2">
          <input
            type="text"
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            placeholder="Ask me about development, technical solutions, or projects..."
            className="input input-bordered flex-1"
          />
          <button type="submit" className="btn btn-primary" disabled={!newMessage.trim()}>
            Send
          </button>
        </form>
        <p className="text-xs text-base-content/60 mt-2 text-center">
          Professional development assistance powered by AI
        </p>
      </div>
    </div>
  );
};

export default ProfessionalAssistant;`;

const headline = "Professional AI Assistant";
const subheading = "Interactive AI assistant powered by modern technology, ready to help solve development tasks and technical challenges.";
---

<Layout title={headline} description={subheading}>

  <main class="container mx-auto px-4 py-16">

    <div class="divider my-12" id="demo">Interactive Demo</div>

    <section class="mb-16">
      <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
        <DemoCard
          sourceFileName="InteractiveShowcase.tsx"
        >
          <InteractiveShowcase slot="demo" client:only="react" />
          <Code slot="code" code={chatSource} lang="tsx" />
        </DemoCard>
      </div>
    </section>
    
    <article class="prose max-w-none mb-16">
      <ChatContent />
    </article>
  </main>
</Layout>