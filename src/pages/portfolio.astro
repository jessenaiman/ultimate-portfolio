---
// Documentation references:
// DaisyUI Collapse: https://daisyui.com/components/collapse/
// DaisyUI Modal: https://daisyui.com/components/modal/
// DaisyUI Tabs: https://daisyui.com/components/tab/

import Layout from '../layouts/Layout.astro';
import { getCollection, render } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import { Icon } from 'astro-icon/components';

// Define the portfolio data type
interface PortfolioData {
  title: string;
  description: string;
  category: 'Programming' | 'Skills' | 'Services' | 'Hosted Applications';
  technologies?: string[];
  backgroundImage?: ImageMetadata;
  logo?: ImageMetadata;
  externalUrl?: string;
  githubUrl?: string;
  demoUrl?: string;
  detailedDescription?: string;
  features?: string[];
  screenshots?: ImageMetadata[];
  order?: number;
  highlight?: boolean;
  tags?: string[];
}

// Extend the CollectionEntry type with our specific data structure
type PortfolioEntry = Omit<CollectionEntry<'portfolio'>, 'data'> & {
  data: PortfolioData;
};

// Set the page title and description
const title = "Portfolio | Jesse Naiman";
const pageDescription = "Explore Jesse Naiman's professional portfolio, skills, services, and hosted applications.";

// Get all portfolio entries
const portfolioEntries = await getCollection('portfolio');

// Get job entries for professional experience
const jobEntries = await getCollection('jobs');

// Sort jobs by date (newest first)
const sortedJobs = [...jobEntries].sort((a, b) => 
  new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
);

// Get all categories for filtering
const categories = ['Programming', 'Skills', 'Services', 'Hosted Applications'];

// Get all unique tags from portfolio entries
const allTags = Array.from(
  new Set(
    portfolioEntries.flatMap(item => item.data.tags || [])
  )
).sort();
---

<Layout 
  title={title}
  maxWidth="container"
  variant="showcase"
>
  <Fragment set:html={`<meta name="description" content="${pageDescription}" />`} />
  <div class="bg-base-200 py-8 mb-8 shadow-inner">
    <div class="container mx-auto px-4 max-w-6xl">
      <h1 class="text-4xl font-bold mb-4 text-center">Professional Portfolio</h1>
      <p class="text-lg text-base-content/80 max-w-3xl mx-auto text-center">
        A collection of my professional experiences and key achievements throughout my career.
      </p>
    </div>
  </div>
  
  <main class="container mx-auto px-4 pb-12 max-w-6xl">
    <div class="space-y-12">
      <!-- Page Header -->
      <section class="text-center">
        <p class="text-lg text-base-content/80 max-w-3xl mx-auto">
          Browse my skills and projects below. Click on any card to expand details.
        </p>
      </section>

      <!-- Filter Controls Section -->
      <div class="collapse bg-base-200 rounded-box mb-8 shadow-md">
        <input type="checkbox" class="min-h-0" /> 
        <div class="collapse-title text-xl font-medium flex items-center justify-between min-h-0 py-4">
          <span>Filter Portfolio</span>
          <Icon name="mdi:filter-outline" class="w-6 h-6" />
        </div>
        <div class="collapse-content">
          <div class="mb-4">
            <h3 class="font-semibold mb-2">Categories</h3>
            <div class="tabs tabs-boxed bg-base-100 p-1">
              <a class="tab tab-active">All</a>
              {categories.map(category => (
                <a class="tab">{category}</a>
              ))}
            </div>
          </div>
          
          <div>
            <h3 class="font-semibold mb-2">Tags</h3>
            <div class="flex flex-wrap gap-2">
              {allTags.map(tag => (
                <label class="cursor-pointer label gap-1 inline-flex p-1">
                  <input type="checkbox" class="checkbox checkbox-xs" />
                  <span class="label-text">{tag}</span>
                </label>
              ))}
            </div>
          </div>
        </div>
      </div>
      
      <!-- Portfolio Items Section -->
      <section>
        <h2 class="text-2xl font-bold mb-6 text-center">Projects & Skills</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          {portfolioEntries.map((item, index) => (
            <div class="collapse collapse-plus bg-base-100 shadow-lg border border-base-200 hover:shadow-xl transition-all duration-300 rounded-xl overflow-hidden">
              <input type="checkbox" class="min-h-0" /> 
              <div class="collapse-title p-4 flex justify-between items-center min-h-0">
                <div class="flex items-center gap-2">
                  <h3 class="font-bold text-lg">{item.data.title}</h3>
                  {item.data.category === 'Programming' && <Icon name="mdi:code-tags" class="w-5 h-5 text-primary" />}
                  {item.data.category === 'Skills' && <Icon name="mdi:lightbulb" class="w-5 h-5 text-warning" />}
                  {item.data.category === 'Services' && <Icon name="mdi:handshake" class="w-5 h-5 text-success" />}
                  {item.data.category === 'Hosted Applications' && <Icon name="mdi:server" class="w-5 h-5 text-info" />}
                  <div class="badge badge-outline badge-sm">{item.data.category}</div>
                </div>
                {item.data.highlight && (
                  <div class="badge badge-primary badge-sm flex gap-1">
                    <Icon name="mdi:star" class="w-3 h-3" /> Expertise
                  </div>
                )}
              </div>
              <div class="collapse-content bg-base-200/50 pt-4">
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
                  <figure class="rounded-box overflow-hidden">
                    {item.data.backgroundImage && item.data.backgroundImage.src ? (
                      <img 
                        src={item.data.backgroundImage.src} 
                        alt={item.data.title} 
                        class="w-full h-40 object-cover" 
                      />
                    ) : (
                      <div class="w-full h-40 bg-gradient-to-r from-primary to-secondary flex items-center justify-center">
                        {item.data.category === 'Programming' && <Icon name="mdi:code-tags" class="w-12 h-12 text-base-100" />}
                        {item.data.category === 'Skills' && <Icon name="mdi:lightbulb" class="w-12 h-12 text-base-100" />}
                        {item.data.category === 'Services' && <Icon name="mdi:handshake" class="w-12 h-12 text-base-100" />}
                        {item.data.category === 'Hosted Applications' && <Icon name="mdi:server" class="w-12 h-12 text-base-100" />}
                      </div>
                    )}
                  </figure>
                  <div>
                    <p class="text-sm mb-3">{item.data.description}</p>
                    
                    {item.data.technologies && item.data.technologies.length > 0 && (
                      <div class="flex flex-wrap gap-1 mb-3">
                        {item.data.technologies.map(tech => (
                          <div class="badge badge-primary badge-sm">{tech}</div>
                        ))}
                      </div>
                    )}
                    
                    <div class="flex justify-between items-center">
                      <div class="flex gap-1">
                        {item.data.externalUrl && (
                          <a href={item.data.externalUrl} target="_blank" rel="noopener noreferrer" class="btn btn-xs btn-ghost">
                            <Icon name="mdi:web" class="w-4 h-4" /> 
                          </a>
                        )}
                        {item.data.githubUrl && (
                          <a href={item.data.githubUrl} target="_blank" rel="noopener noreferrer" class="btn btn-xs btn-ghost">
                            <Icon name="mdi:github" class="w-4 h-4" />
                          </a>
                        )}
                      </div>
                      <button 
                        class="btn btn-primary btn-xs" 
                        onclick={`document.getElementById('portfolio_modal_${index}').showModal()`}
                      >
                        View Details
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </section>
    </div>
    
    <!-- Professional Experience Section -->
    <div class="mt-16">
      <h2 class="text-3xl font-bold mb-8 text-center">Professional Experience</h2>
      <!-- Professional Experience with enhanced design and responsive layout -->
      <div class="space-y-6 max-w-4xl mx-auto bg-base-100 p-6 rounded-xl shadow-lg border border-base-200 md:p-8 lg:p-10">
        {sortedJobs.map(async (job) => {
          // Render job markdown content using Astro's render function
          const { Content } = await render(job);
          return (
          <div class="collapse collapse-arrow bg-base-100 border border-base-200 hover:border-primary/30 transition-all duration-300 rounded-lg overflow-hidden mb-4">
            <!-- Use collapse-arrow instead of collapse-plus for better icon placement -->
            <input type="checkbox" class="peer" aria-label={`Toggle ${job.data.title} details`} />
            <div class="collapse-title p-4 flex flex-col md:flex-row justify-between items-start gap-2 min-h-0 group">
              <div class="flex flex-col md:flex-row md:items-center gap-2 pr-8">
                <h3 class="font-bold text-lg group-hover:text-primary transition-colors">{job.data.title}</h3>
                <div class="badge badge-primary badge-outline badge-sm">{job.data.employer}</div>
              </div>
              <div class="text-base-content/70 text-sm mt-1 md:mt-0">
                <span>{job.data.date}</span>
                {job.data.endDate && <span> - {job.data.endDate}</span>}
              </div>
              <!-- Icon is now handled by collapse-arrow class -->
            </div>
            
            <div class="collapse-content bg-base-100 pt-4">
              <!-- Job metadata section with improved layout -->
              <div class="grid grid-cols-1 lg:grid-cols-2 gap-4 mb-6 text-sm">
                <div class="space-y-2">
                  {job.data.location && (
                    <p class="flex items-start gap-2">
                      <Icon name="mdi:map-marker" class="w-4 h-4 text-primary flex-shrink-0 mt-0.5" />
                      <span><span class="font-medium">Location:</span> {job.data.location}</span>
                    </p>
                  )}
                  
                  {job.data.technologies && (
                    <p class="flex items-start gap-2">
                      <Icon name="mdi:code-tags" class="w-4 h-4 text-primary flex-shrink-0 mt-0.5" />
                      <span><span class="font-medium">Technologies:</span> {job.data.technologies}</span>
                    </p>
                  )}
                </div>
                
                <div>
                  {job.data.employmentType && (
                    <p class="flex items-start gap-2">
                      <Icon name="mdi:briefcase" class="w-4 h-4 text-primary flex-shrink-0 mt-0.5" />
                      <span><span class="font-medium">Type:</span> {job.data.employmentType}</span>
                    </p>
                  )}
                </div>
              </div>
              
              {/* Render the full markdown content with improved typography */}
              <div class="prose prose-sm md:prose-base max-w-none bg-base-200/30 p-4 md:p-6 rounded-lg">
                {/* Use Astro's Content component for proper markdown rendering */}
                <Content />
              </div>
            </div>
          </div>
          );
        })}
      </div>
    </div>
  </div>
  
  <!-- Portfolio Modals with enhanced design to match job entries -->
  {portfolioEntries.map(async (item, index) => {
    // Use Astro's render function for portfolio items
    const { Content } = await render(item);
    return (
      <dialog id={`portfolio_modal_${index}`} class="modal modal-bottom sm:modal-middle">
        <div class="modal-box bg-base-100">
          <div class="flex justify-between items-center mb-4">
            <h3 class="font-bold text-xl text-primary">{item.data.title}</h3>
            <div class="badge badge-primary badge-outline">{item.data.category}</div>
          </div>
          
          {item.data.backgroundImage && (
            <figure class="mb-4">
              <img 
                src={item.data.backgroundImage.src} 
                alt={item.data.title} 
                class="w-full h-48 object-cover rounded-lg" 
              />
            </figure>
          )}
          
          {/* Improved markdown content display with better typography */}
          <div class="prose prose-sm md:prose-base max-w-none bg-base-200/30 p-4 md:p-6 rounded-lg mb-6">
            <Content />
          </div>
          
          {item.data.tags && item.data.tags.length > 0 && (
            <div class="flex flex-wrap gap-1 mb-4">
              <span class="font-semibold mr-2">Tags:</span>
              {item.data.tags.map(tag => (
                <div class="badge badge-secondary badge-outline">{tag}</div>
              ))}
            </div>
          )}
          
          <div class="modal-action flex justify-between w-full">
            <div class="flex gap-2">
              {item.data.externalUrl && (
                <a href={item.data.externalUrl} target="_blank" rel="noopener noreferrer" class="btn btn-sm btn-primary btn-outline">
                  <Icon name="mdi:web" class="w-4 h-4 mr-1" /> Visit Site
                </a>
              )}
              {item.data.githubUrl && (
                <a href={item.data.githubUrl} target="_blank" rel="noopener noreferrer" class="btn btn-sm btn-outline">
                  <Icon name="mdi:github" class="w-4 h-4 mr-1" /> GitHub
                </a>
              )}
            </div>
            
            <form method="dialog">
              <button class="btn btn-sm">Close</button>
            </form>
          </div>
        </div>
      </dialog>
    );
  })}
<!-- No custom script needed - using native dialog with DaisyUI pattern -->
</Layout>
