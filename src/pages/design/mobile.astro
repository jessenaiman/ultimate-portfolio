---
// Layout
import Layout from "../../layouts/Layout.astro";

// Components
import MobileSimulator from '../../components/ui/MobileSimulator.astro';
import CodeSample from '../../components/ui/CodeSample.astro';

// Sample code for the mobile viewport
const mobileViewportCode = `// Mobile viewport meta tag
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover">`;

// Sample code for the toggle button component
const toggleButtonCode = `// Example: Toggle button component (Vanilla JavaScript)
function ToggleButton() {
  let isOn = false;
  
  const button = document.createElement('button');
  button.className = 'relative inline-flex h-6 w-11 items-center rounded-full bg-gray-200';
  
  const span = document.createElement('span');
  span.className = 'inline-block h-4 w-4 transform rounded-full bg-white transition translate-x-1';
  button.appendChild(span);
  
  button.addEventListener('click', () => {
    isOn = !isOn;
    button.className = 'relative inline-flex h-6 w-11 items-center rounded-full ' + 
      (isOn ? 'bg-blue-600' : 'bg-gray-200');
    span.className = 'inline-block h-4 w-4 transform rounded-full bg-white transition ' + 
      (isOn ? 'translate-x-6' : 'translate-x-1');
  });
  
  return button;
}`;
---

<Layout title="Mobile | Ultimate Portfolio">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap');
        html { scroll-behavior: smooth; }
        body {
            font-family: 'Inter', sans-serif;
            overflow-x: hidden;
            padding-right: calc(300px + 2rem);
        }
        #shader-canvas {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
        }
        .content-overlay {
            position: relative;
            z-index: 1;
            max-width: 100%;
        }
        /* Custom styles for animations and gestures */
        .like-btn .icon { transition: transform 0.2s ease, color 0.2s ease; }
        .like-btn.liked .icon { transform: scale(1.25); color: #ef4444; /* red-500 */ }
        .pull-to-refresh-container { touch-action: pan-y; }
        .pull-indicator { transition: transform 0.3s ease, opacity 0.3s ease; }
        .swipe-card { transition: transform 0.3s ease-out; }
        
        /* Mobile simulator styles */
        @media (max-width: 1280px) {
            body { padding-right: 1rem; }
        }
    </style>

    <canvas id="shader-canvas"></canvas>

    <!-- Mobile Simulator (only shows on xl screens) -->
    <MobileSimulator>
        <div class="p-4 h-full flex flex-col">
            <div class="text-center py-4 border-b border-base-200">
                <div class="avatar mx-auto mb-3">
                    <div class="w-16 rounded-full ring ring-primary ring-offset-base-100 ring-offset-2">
                        <img src="https://daisyui.com/images/stock/photo-1534528741775-53994a69daeb.jpg" alt="User" />
                    </div>
                </div>
                <h3 class="font-semibold text-lg">Mobile Preview</h3>
                <p class="text-sm text-base-content/70">Simulated Mobile View</p>
            </div>
            
            <div class="space-y-3 mt-4 flex-1 overflow-y-auto">
                <div class="bg-base-200 rounded-xl p-3">
                    <div class="flex items-center justify-between">
                        <div>
                            <div class="font-medium">New Message</div>
                            <div class="text-xs opacity-70">From: Support Team</div>
                        </div>
                        <span class="badge badge-primary badge-sm">New</span>
                    </div>
                </div>
                
                <div class="flex space-x-2 overflow-x-auto py-2">
                    <span class="badge badge-outline">#mobile</span>
                    <span class="badge badge-outline">#ui</span>
                    <span class="badge badge-outline">#design</span>
                    <span class="badge badge-outline">#demo</span>
                </div>
                
                <div class="bg-base-100 rounded-xl p-3 shadow-sm">
                    <div class="flex items-start space-x-3">
                        <div class="avatar">
                            <div class="w-10 rounded-full">
                                <img src="https://daisyui.com/images/stock/photo-1534528741775-53994a69daeb.jpg" alt="User" />
                            </div>
                        </div>
                        <div class="flex-1">
                            <div class="flex justify-between items-start">
                                <h4 class="font-semibold">Mobile Design</h4>
                                <span class="text-xs opacity-50">2m ago</span>
                            </div>
                            <p class="text-sm">Check out these mobile UI patterns for better user engagement.</p>
                        </div>
                    </div>
                </div>
                
                <div class="mt-auto pt-4 border-t border-base-200">
                    <div class="flex items-center space-x-2">
                        <input type="text" placeholder="Type a message" class="input input-bordered input-sm flex-1" />
                        <button class="btn btn-primary btn-sm">Send</button>
                    </div>
                </div>
            </div>
        </div>
    </MobileSimulator>

    <div class="content-overlay">
        <!-- Hero Section -->
        <div class="hero min-h-screen bg-base-100/80 backdrop-blur-sm">
            <div class="hero-content text-center">
                <div class="max-w-2xl">
                    <h1 class="text-5xl md:text-6xl font-extrabold text-primary">The Feel of Interaction</h1>
                    <p class="py-6 text-lg">This page demonstrates modern design techniques that make web apps feel responsive, tangible, and intuitive. Explore the examples below to see microinteractions, haptic feedback, and gesture controls in action.</p>
                    <div class="flex flex-col sm:flex-row gap-4 justify-center">
                        <a href="#demos" class="btn btn-primary btn-wide">See Demos</a>
                        <button onclick="document.getElementById('code-modal').showModal()" class="btn btn-outline">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M12.316 3.051a1 1 0 01.633 1.265l-4 12a1 1 0 11-1.898-.632l4-12a1 1 0 011.265-.633zM5.707 6.293a1 1 0 010 1.414L3.414 10l2.293 2.293a1 1 0 11-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0zm8.586 0a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 11-1.414-1.414L16.586 10l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                            </svg>
                            View Code
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Demos Section -->
        <div id="demos" class="container mx-auto px-4 py-20">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">

                <!-- Column 1: Microinteractions & Haptics -->
                <div class="space-y-8">
                    <div class="card bg-base-100 shadow-xl">
                        <div class="card-body">
                            <h2 class="card-title text-2xl font-bold">Microinteractions & Haptics</h2>
                            <p class="text-base-content/70">Small animations and vibrations provide satisfying user feedback. Click the elements below. (Haptics only work on supported mobile devices).</p>
                            <div class="divider"></div>
                            <div class="flex items-center justify-around p-4">
                                <!-- Like Button -->
                                <button class="like-btn btn btn-ghost btn-circle" aria-label="Like button">
                                    <svg class="icon w-10 h-10 text-base-content/50" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M4.318 6.318a4.5 4.5 0 016.364 0L12 7.5l1.318-1.182a4.5 4.5 0 116.364 6.364L12 21l-7.682-7.682a4.5 4.5 0 010-6.364z" />
                                    </svg>
                                </button>
                                <!-- Toggle Switch -->
                                <input type="checkbox" class="toggle-switch toggle toggle-primary toggle-lg" />
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Column 2: Gesture Controls -->
                <div class="space-y-8">
                    <div class="card bg-base-100 shadow-xl">
                        <div class="card-body">
                            <h2 class="card-title text-2xl font-bold">Gesture Controls</h2>
                            <p class="text-base-content/70">On touch devices, you can interact directly with these elements.</p>
                            <div class="divider"></div>
                            <!-- Pull to Refresh -->
                            <div class="text-center">
                                <h3 class="font-semibold mb-2">Pull to Refresh</h3>
                                <div class="pull-to-refresh-container relative w-full h-48 bg-base-200 rounded-lg overflow-hidden select-none">
                                    <div class="pull-indicator absolute top-0 left-0 right-0 flex justify-center items-center p-4 opacity-0 -translate-y-full">
                                        <span class="loading loading-spinner text-primary"></span>
                                    </div>
                                    <div class="content p-4 text-center">
                                        <p>Pull down on this box to refresh.</p>
                                    </div>
                                </div>
                            </div>
                            <!-- Swipe to Dismiss -->
                             <div class="text-center mt-4">
                                <h3 class="font-semibold mb-2">Swipe to Dismiss</h3>
                                <div class="swipe-card-container relative h-24">
                                    <div class="swipe-card alert alert-info absolute w-full cursor-grab active:cursor-grabbing">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-current shrink-0 w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                                        <span>Swipe me left or right!</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Developer Resources Section -->
    <section id="developer-resources" class="py-16 bg-base-200/50">
      <div class="container mx-auto px-4">
        <h2 class="text-3xl font-bold text-center mb-8">Developer Resources</h2>
        
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          <!-- Documentation -->
          <div class="card bg-base-100 shadow-xl">
            <div class="card-body">
              <h3 class="card-title">Documentation</h3>
              <ul class="space-y-2 mt-2">
                <li>
                  <a href="https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps/Responsive/Mobile_first" 
                     class="link link-primary flex items-center" target="_blank" rel="noopener">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M4 12h16M12 4v16m7-7-7 7-7-7"/>
                    </svg>
                    MDN: Mobile First Design
                  </a>
                </li>
                <li>
                  <a href="https://web.dev/responsive-web-design-basics/" 
                     class="link link-primary flex items-center" target="_blank" rel="noopener">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M4 12h16M12 4v16m7-7-7 7-7-7"/>
                    </svg>
                    Responsive Web Design Basics
                  </a>
                </li>
                <li>
                  <a href="https://web.dev/learn/design/" 
                     class="link link-primary flex items-center" target="_blank" rel="noopener">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M4 12h16M12 4v16m7-7-7 7-7-7"/>
                    </svg>
                    Learn Responsive Design
                  </a>
                </li>
              </ul>
            </div>
          </div>
          
          <!-- Tools & Libraries -->
          <div class="card bg-base-100 shadow-xl">
            <div class="card-body">
              <h3 class="card-title">Tools & Libraries</h3>
              <ul class="space-y-2 mt-2">
                <li>
                  <a href="https://tailwindcss.com/docs/responsive-design" 
                     class="link link-primary flex items-center" target="_blank" rel="noopener">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="currentColor">
                      <path d="M12.001,4.8c-3.2,0-5.2,1.6-6,4.8c1.2-1.6,2.6-2.2,4.2-1.8c0.913,0.228 1.566,0.89 2.063,1.624C13.666,10.618 15.027,12 18.001,12c3.2,0 5.2-1.6 6-4.8c-1.2,1.6-2.6,2.2-4.2,1.8c-0.913-0.228-1.566-0.89-2.063-1.624C16.337,5.182 14.976,4.8 12.001,4.8zM6.001,12c-3.2,0-5.2,1.6-6,4.8c1.2-1.6 2.6-2.2 4.2-1.8c0.913,0.228 1.566,0.89 2.063,1.624c0.536,0.789 1.896,2.176 4.87,2.176c3.2,0 5.2-1.6 6-4.8c-1.2,1.6-2.6,2.2-4.2,1.8c-0.913-0.228-1.566-0.89-2.063-1.624C10.337,13.382 8.976,12 6.001,12z"/>
                    </svg>
                    Tailwind Responsive Design
                  </a>
                </li>
                <li>
                  <a href="https://daisyui.com/" 
                     class="link link-primary flex items-center" target="_blank" rel="noopener">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="currentColor">
                      <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"/>
                    </svg>
                    daisyUI Components
                  </a>
                </li>
                <li>
                  <a href="https://github.com/pmndrs/react-use-gesture" 
                     class="link link-primary flex items-center" target="_blank" rel="noopener">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="currentColor">
                      <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576C20.566 21.797 24 17.3 24 12c0-6.627-5.373-12-12-12z"/>
                    </svg>
                    React Use Gesture
                  </a>
                </li>
              </ul>
            </div>
          </div>
          
    </section>

    <!-- three.js Library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <!-- Vertex Shader -->
    <script id="vertexShader" type="x-shader/x-vertex">
        void main() { gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0); }
    </script>
    <!-- Fragment Shader (Subtle Version) -->
    <script id="fragmentShader" type="x-shader/x-fragment">
        uniform float u_time;
        uniform vec2 u_resolution;

        float random (in vec2 st) { return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123); }
        float noise (in vec2 st) {
            vec2 i = floor(st);
            vec2 f = fract(st);
            float a = random(i);
            float b = random(i + vec2(1.0, 0.0));
            float c = random(i + vec2(0.0, 1.0));
            float d = random(i + vec2(1.0, 1.0));
            vec2 u = f*f*(3.0-2.0*f);
            return mix(a, b, u.x) + (c - a)* u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
        }

        void main() {
            vec2 st = gl_FragCoord.xy/u_resolution.xy;
            st.x *= u_resolution.x / u_resolution.y;
            vec3 color = vec3(0.0);
            float n = noise(st * 4.0 + u_time * 0.1);
            color = mix(vec3(0.9, 0.9, 0.95), vec3(0.8, 0.85, 0.9), smoothstep(0.4, 0.6, n));
            gl_FragColor = vec4(color, 1.0);
        }
    </script>

    <script type="module">
        // --- Shader Background Setup ---
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({ canvas: document.querySelector('#shader-canvas'), alpha: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        camera.position.z = 1;

        const uniforms = {
            u_time: { value: 1.0 },
            u_resolution: { value: new THREE.Vector2(window.innerWidth, window.innerHeight) },
        };

        const material = new THREE.ShaderMaterial({
            uniforms: uniforms,
            vertexShader: document.getElementById('vertexShader').textContent,
            fragmentShader: document.getElementById('fragmentShader').textContent,
        });

        const plane = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), material);
        scene.add(plane);

        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
            uniforms.u_resolution.value.set(window.innerWidth, window.innerHeight);
        });

        const clock = new THREE.Clock();
        function animate() {
            requestAnimationFrame(animate);
            uniforms.u_time.value = clock.getElapsedTime();
            renderer.render(scene, camera);
        }
        animate();

        // --- Interaction Logic ---
        function vibrate() {
            if (navigator.vibrate) {
                navigator.vibrate(50); // Vibrate for 50ms
            }
        }

        // Like Button
        const likeBtn = document.querySelector('.like-btn');
        likeBtn.addEventListener('click', () => {
            likeBtn.classList.toggle('liked');
            vibrate();
        });

        // Toggle Switch
        const toggleSwitch = document.querySelector('.toggle-switch');
        toggleSwitch.addEventListener('change', () => {
            vibrate();
        });

        // Pull to Refresh
        const ptrContainer = document.querySelector('.pull-to-refresh-container');
        const pullIndicator = ptrContainer.querySelector('.pull-indicator');
        const ptrContent = ptrContainer.querySelector('.content');
        let startY = 0;
        let pullDistance = 0;

        ptrContainer.addEventListener('touchstart', (e) => {
            startY = e.touches[0].pageY;
        }, { passive: true });

        ptrContainer.addEventListener('touchmove', (e) => {
            const currentY = e.touches[0].pageY;
            pullDistance = Math.max(0, currentY - startY);
            if (pullDistance > 0) {
                pullIndicator.style.opacity = Math.min(1, pullDistance / 100);
                pullIndicator.style.transform = `translateY(${pullDistance * 0.5}px)`;
            }
        }, { passive: true });

        ptrContainer.addEventListener('touchend', () => {
            if (pullDistance > 100) { // Refresh threshold
                pullIndicator.style.transform = 'translateY(0)';
                pullIndicator.style.opacity = '1';
                ptrContent.textContent = 'Refreshing...';
                setTimeout(() => {
                    ptrContent.textContent = 'Content refreshed!';
                    pullIndicator.style.transform = 'translateY(-100%)';
                    pullIndicator.style.opacity = '0';
                }, 1500);
            } else {
                pullIndicator.style.transform = 'translateY(-100%)';
                pullIndicator.style.opacity = '0';
            }
            pullDistance = 0;
        });

        // Swipe to Dismiss
        const swipeCard = document.querySelector('.swipe-card');
        let cardStartX = 0;
        let cardCurrentX = 0;
        let isDragging = false;

        function handleDragStart(e) {
            isDragging = true;
            cardStartX = e.type === 'touchstart' ? e.touches[0].clientX : e.clientX;
            swipeCard.style.transition = 'none'; // Disable transition while dragging
        }

        function handleDragMove(e) {
            if (!isDragging) return;
            cardCurrentX = (e.type === 'touchmove' ? e.touches[0].clientX : e.clientX) - cardStartX;
            swipeCard.style.transform = `translateX(${cardCurrentX}px)`;
        }

        function handleDragEnd() {
            if (!isDragging) return;
            isDragging = false;
            swipeCard.style.transition = 'transform 0.3s ease-out';
            const threshold = swipeCard.offsetWidth / 3;

            if (Math.abs(cardCurrentX) > threshold) {
                // Dismiss card
                swipeCard.style.transform = `translateX(${cardCurrentX > 0 ? '150%' : '-150%'})`;
                setTimeout(() => {
                    // Reset card after animation
                    swipeCard.style.transition = 'none';
                    swipeCard.style.transform = 'translateX(0)';
                }, 300);
            } else {
                // Return to original position
                swipeCard.style.transform = 'translateX(0)';
            }
            cardCurrentX = 0;
        }

        swipeCard.addEventListener('touchstart', handleDragStart, { passive: true });
        swipeCard.addEventListener('touchmove', handleDragMove, { passive: true });
        swipeCard.addEventListener('touchend', handleDragEnd);
        swipeCard.addEventListener('mousedown', handleDragStart);
        document.addEventListener('mousemove', handleDragMove);
        document.addEventListener('mouseup', handleDragEnd);

    </script>

    <!-- Code Samples Section -->
    <div class="container mx-auto px-4 py-12 max-w-4xl">
      <h2 class="text-3xl font-bold mb-8">Code Examples</h2>
      
      <!-- Mobile Viewport Meta Tag -->
      <div class="mb-8">
        <CodeSample 
          id="mobile-viewport-code"
          title="Mobile Viewport Meta Tag"
          code={mobileViewportCode}
          lang="html"
        >
          {mobileViewportCode}
        </CodeSample>
      </div>
      
      <!-- Toggle Button Component -->
      <div class="mb-8">
        <CodeSample 
          id="toggle-button-code"
          title="Toggle Button Component"
          code={toggleButtonCode}
          lang="typescript"
        >
          {toggleButtonCode}
        </CodeSample>
      </div>
    </div>

    <!-- Initialize mobile simulator interactions -->
    <script>
      // Mobile simulator message input
      document.addEventListener('DOMContentLoaded', () => {
        const messageInput = document.querySelector('.mobile-simulator input[type="text"]') as HTMLInputElement | null;
        const sendButton = document.querySelector('.mobile-simulator .btn-primary');
        
        if (messageInput && sendButton) {
          sendButton.addEventListener('click', () => {
            if (messageInput.value.trim() !== '') {
              // In a real app, you would send the message here
              console.log('Message sent:', messageInput.value);
              messageInput.value = '';
            }
          });
          
          messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && messageInput.value.trim() !== '') {
              console.log('Message sent:', messageInput.value);
              messageInput.value = '';
            }
          });
        }
      });
    </script>
</html>
