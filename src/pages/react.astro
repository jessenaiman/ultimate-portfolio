---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import InteractiveChat from '../components/React/Chat';

// Get the React markdown content
const allInfo = await getCollection('info');
const reactContent = allInfo.find(entry => entry.slug === 'react');

// Check if content was found
if (!reactContent) {
  console.error('React content not found. Available entries:', allInfo.map(e => e.slug));
  throw new Error('React content not found. Please check your content collection.');
}

// Render the markdown content
const { Content } = await reactContent.render();

// Features of React
const features = [
  {
    title: "Component-Based",
    description: "Build encapsulated components that manage their own state, then compose them to make complex UIs."
  },
  {
    title: "Learn Once, Write Anywhere",
    description: "We don't make assumptions about your tech stack, so you can develop new features without rewriting existing code."
  },
  {
    title: "Declarative",
    description: "React makes it painless to create interactive UIs. Design simple views for each state in your application."
  }
];

// React component examples with syntax highlighting
const componentExamples = {
  basic: `// Basic React Component
function Welcome() {
  return <h1 className="text-blue-500">Hello, React Developer!</h1>;
}

// Using the component
const App = () => (
  <div>
    <Welcome />
  </div>
);`,
  state: `// React Component with State
import { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);
  
  return (
    <div>
      <p>You clicked {count} times</p>
      <button 
        className="px-4 py-2 bg-blue-500 text-white rounded"
        onClick={() => setCount(count + 1)}
      >
        Click me
      </button>
    </div>
  );
}`,
  effect: `// React Component with Side Effects
import { useState, useEffect } from 'react';

function Example() {
  const [data, setData] = useState(null);
  
  useEffect(() => {
    // Fetch data when component mounts
    fetch('https://api.example.com/data')
      .then(response => response.json())
      .then(data => setData(data));
  }, []); // Empty array means this effect runs once on mount
  
  return (
    <div>
      {data ? (
        <pre>{JSON.stringify(data, null, 2)}</pre>
      ) : (
        <p>Loading...</p>
      )}
    </div>
  );
}`
};

---

<Layout
  title={reactContent.data.title || "React: Building Dynamic User Interfaces"}
  description={reactContent.data.description || "Learn about React and how to use it in this Astro project"}
  variant="documentation"
>
  <main class="container mx-auto px-4 py-8 max-w-7xl">
    <!-- Hero Section with Brief Summary -->
    <section class="text-center mb-8">
      <div class="flex justify-center mb-4">
        <div class="badge badge-primary badge-lg p-4 text-lg">JavaScript Library</div>
      </div>
      <h1 class="text-4xl md:text-5xl font-bold mb-4">React</h1>
      <p class="text-lg max-w-3xl mx-auto mb-6">
        {reactContent.data.description}
      </p>
      <div class="flex justify-center gap-4">
        <a href="https://reactjs.org/docs/getting-started.html" class="btn btn-primary">
          Get Started
        </a>
        <a href="https://github.com/facebook/react" class="btn btn-outline">
          GitHub
        </a>
      </div>
    </section>

    <!-- Main Content -->
    <article class="prose max-w-none">
      <Content />
    </article>

    <!-- Code Examples Section -->
    <section class="mb-16 mt-12">
      <h2 class="text-2xl md:text-3xl font-bold mb-6 text-center">Code Examples</h2>
      
      <div class="tabs tabs-boxed justify-center mb-6">
        {Object.entries(componentExamples).map(([key]) => (
          <a class="tab" data-tab={key}>
            {key.charAt(0).toUpperCase() + key.slice(1)}
          </a>
        ))}
      </div>

      <div class="bg-base-200 rounded-lg p-6">
        {Object.entries(componentExamples).map(([key, code]) => (
          <div class="tab-content hidden" data-tab={key}>
            <pre><code class="language-jsx">{code}</code></pre>
          </div>
        ))}
      </div>
    </section>

    <!-- Features Section -->
    <section class="grid md:grid-cols-3 gap-8 mb-16">
      {features.map((feature, index) => (
        <div key={index} class="card bg-base-200">
          <div class="card-body">
            <h3 class="card-title">{feature.title}</h3>
            <p>{feature.description}</p>
          </div>
        </div>
      ))}
    </section>

    <!-- Interactive Chat Component -->
    <section class="mb-16">
      <h2 class="text-2xl md:text-3xl font-bold mb-6 text-center">Ask About React</h2>
      <InteractiveChat />
    </section>

    <!-- Call to Action -->
    <section class="text-center mb-8">
      <div class="card bg-base-200 max-w-3xl mx-auto">
        <div class="card-body">
          <h2 class="card-title justify-center mb-4">Ready to start building with React?</h2>
          <p class="mb-6">Get started with the official React documentation and tutorials.</p>
          <div class="flex justify-center gap-4">
            <a href="https://reactjs.org/docs/getting-started.html" class="btn btn-primary">
              Documentation
            </a>
            <a href="https://reactjs.org/tutorial/tutorial.html" class="btn btn-outline">
              Tutorial
            </a>
          </div>
        </div>
      </div>
    </section>
  </main>

  <script is:inline>
    // Tab functionality
    document.addEventListener('DOMContentLoaded', () => {
      const tabs = document.querySelectorAll('.tab');
      const tabContents = document.querySelectorAll('.tab-content');
      
      // Show first tab by default
      if (tabs.length > 0 && tabContents.length > 0) {
        tabs[0].classList.add('tab-active');
        tabContents[0].classList.remove('hidden');
      }
      
      // Add click handlers for tabs
      tabs.forEach(tab => {
        tab.addEventListener('click', (e) => {
          const tabName = e.target.getAttribute('data-tab');
          
          // Update active tab
          tabs.forEach(t => t.classList.remove('tab-active'));
          e.target.classList.add('tab-active');
          
          // Show selected tab content
          tabContents.forEach(content => {
            if (content.getAttribute('data-tab') === tabName) {
              content.classList.remove('hidden');
            } else {
              content.classList.add('hidden');
            }
          });
        });
      });
    });
  </script>
</Layout>
